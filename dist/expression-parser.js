require("@nexssp/extend")("string");const{bold:bold,red:red,yellow:yellow}=require("@nexssp/ansi"),expressionParser=(e,r)=>{if(Array.isArray(r))return r.map((r=>expressionParser(e,r)));let s=new Set;if(r&&isNaN(r)&&r.includes&&r.includes("${"))try{return r.interpolate(e)}catch(o){let i=[];if(o.message.includes("is not defined")){const r=o.message.split(" ")[0];Object.keys(e).forEach((e=>{r.similarity(e)>50&&i.push(e)}))}s.add("=".repeat(80)),s.add(bold(`\tError in parsing expression: ${r},`)+red(bold(`\n\tError message: ${yellow(bold(o.message))}`))+` ${i&&i.length>0?blue(`\nDid you meant: ${i.join(" or ")}?`):""}`),s.add(e)}return s.size>0&&(s.forEach((e=>{console.log(red(e))})),process.exit(0)),r};module.exports.expressionParser=expressionParser,module.exports.parseData=e=>(Object.keys(e).forEach((r=>{e[r]=expressionParser(e,e[r])})),e);